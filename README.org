#+TITLE: Emacs Configuration File
#+AUTHOR: Rabi Ahmad
#+DESCRIPTION: Rabi's personal Emacs configuration file
#+OPTIONS: toc:3

* Note
GNU Emacs 29.4 configuration in org-mode for better readability and maintainability.
Tailored for Windows 11. No guarantee that this will work on any other system.
* Usage
To use this configuration there must be an ~/.emacs.d/ directory set up which will contain the early-init.el and init.el. Those files do not need to be created manually.
Steps:
1. open this org file in Emacs
2. Run `C-c C-v C-t`. This will "tangle" the code blocks from the configuration into the relevant init files. This essentially parses the code blocks using Org Babel and copies them to the the emacs configuration files.
* Configuration
** Early-init
These code blocks will run before the main init.el runs. The main purpose here is because the encoding of icons was not working on Windows 11, so this had to be changed to UTF-8 in order for nerd-icons to display correctly. I have put this in early-init.el.

Issues with Windows 11 not displaying icons correctly
Github Issue: https://github.com/emacs-dashboard/emacs-dashboard/issues/471
#+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el :mkdirp yes
(set-language-environment "UTF-8")  ; char-displayable-p returns 'unicode
(set-language-environment "English")  ; char-displayable-p returns nil
(prefer-coding-system 'utf-8)
#+end_src
** Built-Ins
Going to configure all the built in packages first
And any third party lib that are related to it will go under them.
*** Emacs Defaults
**** Disable some default UI elements 
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (scroll-bar-mode -1)     ; Disable scroll bar
  (tool-bar-mode -1)       ; Disable toolbar
  (tooltip-mode -1)        ; Disable tooltips
  (set-fringe-mode 10)     ; Give more breathing room
  (toggle-frame-maximized) ; Maximize the emacs window on startup
  (set-frame-parameter nil 'alpha-background 10) ; For current frame, transparency
  (add-to-list 'default-frame-alist '(alpha-background . 100)) ; For all new frames henceforth
  (menu-bar-mode -1) ; Disable the menu bar
  (delete-selection-mode 1)    ;; You can select text and delete it by typing.
  (electric-indent-mode -1)    ;; Turn off the weird indenting that Emacs does by default.
  (electric-pair-mode 1)       ;; Turns on automatic parens pairing
  ;; The following prevents <> from auto-pairing when electric-pair-mode is on.
  ;; Otherwise, org-tempo is broken when you try to <s TAB...
  (add-hook 'org-mode-hook (lambda ()
           (setq-local electric-pair-inhibit-predicate
                   `(lambda (c)
                  (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
  (global-auto-revert-mode t)  ;; Automatically show changes if the file has changed
  (global-visual-line-mode t)  ;; Enable truncated lines
  (setq org-edit-src-content-indentation 0) ;; Set src block automatic indent to 0 instead of 2.
  (setq use-file-dialog nil)   ;; No file dialog
  (setq use-dialog-box nil)    ;; No dialog box
  (setq pop-up-windows nil)    ;; No popup windows
#+end_src
**** Disable the annoying bell sound
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (setq visible-bell 1)
#+end_src
**** Save ~ files and other backups all together
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
        backup-by-copying t    ; Don't delink hardlinks
        version-control t      ; Use version numbers on backups
        delete-old-versions t  ; Automatically delete excess backups
        kept-new-versions 20   ; How many of the newest versions to keep
        kept-old-versions 5)   ; And how many of the old
#+end_src
**** Line numbers
First, enable line numbers globally by default
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (column-number-mode) ; Allow display of line number
  (global-display-line-numbers-mode t) ; Activate display of line number
#+end_src

Disable line numbers for some modes
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  eshell-mode-hook
                  shell-mode-hook
                  vterm-mode-hook
                  treemacs-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

Not too sure what this bit does. I copied it from somewhere
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (dolist (mode '(org-mode-hook
                  python-mode-hook
                  c-mode-hook
                  c++-mode-hook))
    (add-hook mode (lambda () (visual-line-mode 1))))
#+end_src
**** Initialising package sources 
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")
                           ("gnu-devel" . "https://elpa.gnu.org/devel/")))

  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package on non-Linux platform
  (unless (package-installed-p 'use-package) ; use-package not installed by default
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src
** Third party packages
*** Counsel
Counsel is a collection of Ivy-enhanced versions of common Emacs commands.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (use-package counsel
    :bind (("M-x" . counsel-M-x)
	   ("C-x b" . counsel-ibuffer)
	   ("C-x C-b" . counsel-ibuffer)
	   ("C-x C-f" . counsel-find-file)
	   ("C-x f" . counsel-find-file)))
#+end_src
*** Ivy
Ivy is a generic completion mechanism for Emacs.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done))
    :config
    (ivy-mode 1))
#+end_src

Use ivy-rich, a third party add-on to ivy, to provide command descriptions
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
 (use-package ivy-rich
  :init
  (ivy-rich-mode 1))
#+end_src
*** Helpful
Package to provide help iterface containing more context
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (use-package helpful
    :ensure t
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src
*** Window Management
**** Windmove
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
   (require 'windmove)

  ;;;###autoload
  (defun buf-move-up ()
    "Swap the current buffer and the buffer above the split.
  If there is no split, ie now window above the current one, an
  error is signaled."
  ;;  "Switches between the current buffer, and the buffer above the
  ;;  split, if possible."
    (interactive)
    (let* ((other-win (windmove-find-other-window 'up))
           (buf-this-buf (window-buffer (selected-window))))
      (if (null other-win)
          (error "No window above this one")
        ;; swap top with this one
        (set-window-buffer (selected-window) (window-buffer other-win))
        ;; move this one to top
        (set-window-buffer other-win buf-this-buf)
        (select-window other-win))))

  ;;;###autoload
  (defun buf-move-down ()
  "Swap the current buffer and the buffer under the split.
  If there is no split, ie now window under the current one, an
  error is signaled."
    (interactive)
    (let* ((other-win (windmove-find-other-window 'down))
           (buf-this-buf (window-buffer (selected-window))))
      (if (or (null other-win) 
              (string-match "^ \\*Minibuf" (buffer-name (window-buffer other-win))))
          (error "No window under this one")
        ;; swap top with this one
        (set-window-buffer (selected-window) (window-buffer other-win))
        ;; move this one to top
        (set-window-buffer other-win buf-this-buf)
        (select-window other-win))))

  ;;;###autoload
  (defun buf-move-left ()
  "Swap the current buffer and the buffer on the left of the split.
  If there is no split, ie now window on the left of the current
  one, an error is signaled."
    (interactive)
    (let* ((other-win (windmove-find-other-window 'left))
           (buf-this-buf (window-buffer (selected-window))))
      (if (null other-win)
          (error "No left split")
        ;; swap top with this one
        (set-window-buffer (selected-window) (window-buffer other-win))
        ;; move this one to top
        (set-window-buffer other-win buf-this-buf)
        (select-window other-win))))

  ;;;###autoload
  (defun buf-move-right ()
  "Swap the current buffer and the buffer on the right of the split.
  If there is no split, ie now window on the right of the current
  one, an error is signaled."
    (interactive)
    (let* ((other-win (windmove-find-other-window 'right))
           (buf-this-buf (window-buffer (selected-window))))
      (if (null other-win)
          (error "No right split")
        ;; swap top with this one
        (set-window-buffer (selected-window) (window-buffer other-win))
        ;; move this one to top
        (set-window-buffer other-win buf-this-buf)
        (select-window other-win))))
#+end_src

Now set keybindings for buf-move functions
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
(global-set-key (kbd "<C-S-M-up>")     'buf-move-up)
(global-set-key (kbd "<C-S-M-down>")   'buf-move-down)
(global-set-key (kbd "<C-S-M-left>")   'buf-move-left)
(global-set-key (kbd "<C-S-M-right>")  'buf-move-right)
#+end_src
*** Theme customisations
**** Fonts
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
;; Set the font everywhere
(set-frame-font "JetBrains Mono-12" nil t)

;; Check if Nerd Font is installed and avoid installation prompt
(if (member "JetBrains Mono" (font-family-list))
    (message "Nerd Font is installed")
  (message "Nerd Font is NOT installed"))

;; Set the unicode font
(setq doom-unicode-font (font-spec :family "JetBrains Mono" :size 11))

(set-face-attribute 'default nil :height 120)  ;; Adjust font size to 12 points
#+end_src
**** Highlight TODO
Add highlighting to TODO and other related keywords.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp
(use-package hl-todo
  :hook ((org-mode . hl-todo-mode)
         (prog-mode . hl-todo-mode))
  :config
  (setq hl-todo-highlight-punctuation ":"
        hl-todo-keyword-faces
        `(("TODO"       warning bold)
          ("FIXME"      error bold)
          ("HACK"       font-lock-constant-face bold)
          ("REVIEW"     font-lock-keyword-face bold)
          ("NOTE"       success bold)
          ("DEPRECATED" font-lock-doc-face bold))))
#+end_src
**** Doom themes
Using the doom-dracula theme
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
(use-package doom-themes
  ;;:ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-dracula t)
  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src
**** Icon packs
Installing all-the-icons and nerd-icons
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
(use-package all-the-icons
  :if (display-graphic-p))

(use-package nerd-icons)

(use-package nerd-icons-dired
  :hook
  (dired-mode . nerd-icons-dired-mode)
  :config
  (setq dired-listing-switches "-agho --group-directories-first"
	dired-omit-files "^\\.[^.].*"
	dired-omit-verbose nil
	dired-dwim-target t ; Copy and move files netween dired buffers
	dired-recursive-copies 'always ; "always" means no asking
	dired-recursive-deletes 'top   ; "top" means ask once for top level directory
	dired-ls-F-marks-symlinks t ; -F marks links with @
	dired-hide-details-hide-symlink-targets nil
	auto-save-list-file-prefix nil ; not create directory .emacs.d/auto-save-list
	;; Auto refresh dired, but be quiet about it
	global-auto-revert-non-file-buffers t
	wdired-allow-to-change-permissions t
	auto-revert-verbose nil
	auto-revert-interval 1
	delete-by-moving-to-trash t))
#+end_src
**** Doom Modeline
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
;; This changes the modeline bar at the bottom of the screen
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :config
  (setq doom-modeline-height 35      ;; sets modeline height
        doom-modeline-bar-width 5    ;; sets right bar width
        doom-modeline-persp-name t   ;; adds perspective name to modeline
        doom-modeline-persp-icon t   ;; adds folder icon next to persp name
	inhibit-compacting-font-caches t  ;; fix lagging issue
	))
#+end_src
**** Rainbow delimiters
Make parentheses different colors to easily tell how they close
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
**** Dashboard
Landing page when opening Emacs. This contains some useful links (and it looks better than the default tutorial, or an empty scratch buffer)
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (use-package page-break-lines)
     (use-package dashboard
       :ensure t
       :init
       (setq initial-buffer-choice 'dashboard-open)
       ;; possible values: 'official, 'logo, integers (1, 2, 3, 4)
       (setq dashboard-startup-banner 2)
       (setq dashboard-set-heading-icons t)
       (setq dashboard-set-file-icons t)
       (setq dashboard-center-content t)
       (setq dashboard-vertically-center-content t)
       (setq dashboard-display-icons-p t)
       (setq dashboard-icon-type 'nerd-icons)
       (setq dashboard-filter-agenda-entry 'dashboard-no-filter-agenda)
       ;; choose which sections to show and how many items per section
       (setq dashboard-items '((recents   . 5)
                               (projects  . 5)
                               (agenda    . 5)
                               (bookmarks . 5)
                               (registers . 5)))
       ;; customize which widgets to display in order
       (setq dashboard-startupify-list '(dashboard-insert-banner
                                         ;; dashboard-insert-newline
                                         ;; dashboard-insert-banner-title
                                         ;; dashboard-insert-newline
                                         dashboard-insert-navigator
                                         dashboard-insert-newline
                                         dashboard-insert-init-info
                                         dashboard-insert-items
                                         dashboard-insert-newline
                                         dashboard-insert-footer))

       ;; customise the shortcuts for each heading on the dashboard
       (setq dashboard-item-shortcuts '((recents   . "r")
                                        (projects  . "p")
                                        (agenda    . "a")
                                        (bookmarks . "m")
                                        (registers . "e")))

       (setq dashboard-item-names '(("Agenda for the coming week:" . "Agenda:")))

       :config
       (dashboard-setup-startup-hook)
       )

     (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
#+end_src
*** Treemacs
Using treemacs to show files in tree view on the left, to simulate an IDE experience such as Visual Studio Code
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay        0.5
            treemacs-directory-name-transformer      #'identity
            treemacs-display-in-side-window          t
            treemacs-eldoc-display                   'simple
            treemacs-file-event-delay                2000
            treemacs-file-extension-regex            treemacs-last-period-regex-value
            treemacs-file-follow-delay               0.2
            treemacs-file-name-transformer           #'identity
            treemacs-follow-after-init               t
            treemacs-expand-after-init               t
            treemacs-find-workspace-method           'find-for-file-or-pick-first
            treemacs-git-command-pipe                ""
            treemacs-goto-tag-strategy               'refetch-index
            treemacs-header-scroll-indicators        '(nil . "^^^^^^")
            treemacs-hide-dot-git-directory          t
            treemacs-indentation                     2
            treemacs-indentation-string              " "
            treemacs-is-never-other-window           nil
            treemacs-max-git-entries                 5000
            treemacs-missing-project-action          'ask
            treemacs-move-files-by-mouse-dragging    t
            treemacs-move-forward-on-expand          nil
            treemacs-no-png-images                   nil
            treemacs-no-delete-other-windows         t
            treemacs-project-follow-cleanup          nil
            treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                        'left
            treemacs-read-string-input               'from-child-frame
            treemacs-recenter-distance               0.1
            treemacs-recenter-after-file-follow      nil
            treemacs-recenter-after-tag-follow       nil
            treemacs-recenter-after-project-jump     'always
            treemacs-recenter-after-project-expand   'on-distance
            treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
            treemacs-project-follow-into-home        nil
            treemacs-show-cursor                     nil
            treemacs-show-hidden-files               t
            treemacs-silent-filewatch                nil
            treemacs-silent-refresh                  nil
            treemacs-sorting                         'alphabetic-asc
            treemacs-select-when-already-in-treemacs 'move-back
            treemacs-space-between-root-nodes        t
            treemacs-tag-follow-cleanup              t
            treemacs-tag-follow-delay                1.5
            treemacs-text-scale                      nil
            treemacs-user-mode-line-format           nil
            treemacs-user-header-line-format         nil
            treemacs-wide-toggle-width               70
            treemacs-width                           35
            treemacs-width-increment                 1
            treemacs-width-is-initially-locked       t
            treemacs-workspace-switch-cleanup        nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (when treemacs-python-executable
        (treemacs-git-commit-diff-mode t))

      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple)))

      (treemacs-hide-gitignored-files-mode nil))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t d"   . treemacs-select-directory)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-evil
    :after (treemacs evil)
    :ensure t)

  ;; Not using Projectile, so have commented this out
  ;; (use-package treemacs-projectile
  ;;   :after (treemacs projectile)
  ;;   :ensure t)

  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :ensure t)

  (use-package treemacs-magit
    :after (treemacs magit)
    :ensure t)

  (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
    :after (treemacs persp-mode) ;;or perspective vs. persp-mode
    :ensure t
    :config (treemacs-set-scope-type 'Perspectives))

  (use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
    :after (treemacs)
    :ensure t
    :config (treemacs-set-scope-type 'Tabs))
#+end_src
*** Which key
For more useful completion when you start typing a command
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.5))
#+end_src
*** Org Mode
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
(use-package org
  :config
  (setq org-ellipsis " ▾")
  (setq org-log-done t))

#+end_src

Allows us to create a Table of Contents in our Org docs
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
(use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

Better looking bullets rather than using default asterisks
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
(use-package org-bullets)
(add-hook 'org-mode-hook 'org-indent-mode)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
(electric-indent-mode -1)

(require 'org-tempo)

(use-package rainbow-mode
  :hook 
  ((org-mode prog-mode) . rainbow-mode))

#+end_src

Org Roam and Agenda
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
(use-package org-roam
  :ensure t
  :custom
  (org-roam-directory "~/Notes")
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n i" . org-roam-node-insert))
  :config
  (org-roam-db-autosync-mode))

(setq org-agenda-files (list "~/Notes/work.org"
                             "~/Notes/home.org"))
#+end_src

Customise font sizes for org level headers
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
(custom-set-faces
 '(org-level-1 ((t (:inherit outline-1 :height 1.7))))
 '(org-level-2 ((t (:inherit outline-2 :height 1.6))))
 '(org-level-3 ((t (:inherit outline-3 :height 1.5))))
 '(org-level-4 ((t (:inherit outline-4 :height 1.4))))
 '(org-level-5 ((t (:inherit outline-5 :height 1.3))))
 '(org-level-6 ((t (:inherit outline-5 :height 1.2))))
 '(org-level-7 ((t (:inherit outline-5 :height 1.1)))))
#+end_src
*** CSV Mode
To make editing csv files easier. This tabulates the contents in a csv file to algin the columns.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (use-package csv-mode
    :ensure t
    :hook (csv-mode . csv-align-mode))
#+end_src
*** Magit
Git management tool
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
  ;; Git porcelain (porcelain = make it nice)
  ;; Main control is C-x g
  (use-package magit
    :ensure t
    :config
    (setq magit-save-repository-buffers nil))
#+end_src
*** Company
*what does company do?*
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (use-package company
    :ensure t
    :hook (after-init . global-company-mode)
    :custom
    ;; M-<num> to select an option according to its number.
    (company-show-numbers t)
    ;; Only 2 letters required for completion to activate.
    (company-minimum-prefix-length 2)
    ;; Do not downcase completions by default.
    (company-dabbrev-downcase nil)
    ;; Even if I write something with the wrong case,
    ;; provide the correct casing.
    (company-dabbrev-ignore-case t)
    ;; Company completion wait
    (company-idle-delay 0.2)
    ;; No company-mode in shell & eshell
    (company-global-modes '(not eshell-mode shell-mode)))

  (use-package company-box
    :hook (company-mode . company-box-mode))
#+end_src
*** Eglot 
Package for Language Server Protocol support. Useful for coding in different languages. Has some autocompletion features. Another alternative package is LSP mode. I have not used it, but apparently eglot is more minimal.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (use-package eglot
    :ensure t
    :config
    (add-to-list 'eglot-server-programs '((c++-mode c-mode) . ("clangd"))))

  ;; For some reason can't add this to use-package above
  (add-hook 'python-mode-hook 'eglot-ensure)
  (add-hook 'c-mode-hook 'eglot-ensure)
  (add-hook 'c++-mode-hook 'eglot-ensure)

  ;; Don't blow out the minibuffer with company
  (setq eldoc-echo-area-use-multiline-p nil)

  ;; Some extra python fluff
  (add-hook 'python-mode-hook (lambda () (setq fill-column 120)))
#+end_src
*** Evil Mode
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (unless (package-installed-p 'evil)
    (package-install 'evil))

  (require 'evil)
  (evil-mode 1)
#+end_src
*** Custom functions
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (defun reload-init-file ()
    (interactive)
    (load-file user-init-file)
    (load-file user-init-file))
#+end_src
*** Global keybindings
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (use-package general)

  (define-key global-map "\C-cl" 'org-store-link)
    (define-key global-map "\C-ca" 'org-agenda)


  (general-define-key
   "C-M-j" 'counsel-switch-buffer
   "C-x r C-f" 'counsel-recentf
   "C-M-i" '(lambda () (interactive) (find-file user-init-file))
   "C-c l" 'org-store-link
   "C-c a" 'org-agenda
   "C-c C-/" 'comment-or-uncomment-region
   
   ;; Use ESC to quit prompts (same as C-q)
   "<escape>" 'keyboard-escape-quit

   ;; You can use the bindings CTRL plus =/- for zooming in/out.  You can also use CTRL plus the mouse wheel for zooming in/out.
   "C-=" 'text-scale-increase
   "C--" 'text-scale-decrease
   "<C-wheel-up>" 'text-scale-increase
   "<C=wheel-down>" 'text-scale-decrease
  )
#+end_src
*** Custom set variables (automatically added)
I did not add these myself. These were added automatically. Not too sure what the purpose is.
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(package-selected-packages
     '(treemacs-tab-bar treemacs-persp which-key vterm treemacs-magit treemacs-icons-dired treemacs-evil toc-org rainbow-mode rainbow-delimiters pyenv-mode poetry pet page-break-lines org-roam org-bullets nerd-icons-dired neotree ivy-rich helpful general exec-path-from-shell ef-themes doom-themes doom-modeline dashboard csv-mode counsel company-box command-log-mode all-the-icons-dired)))
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   )
#+end_src
